//
//  Client.swift
//  raccoon
//
//  Created by Manuel García-Estañ on 8/10/16.
//  Copyright © 2016 manuege. All rights reserved.
//

import Foundation
import CoreData
import AlamofireCoreData
import PromiseKit
import Alamofire

/**
 An object which encapsulate a promise that can be cancelled at any time.
 */
public struct Cancellable<T> {
    /// The promise of the cancellable object
    public let promise: Promise<T>
    
    /// The method to call if the request must be cancelled
    public let cancel: () -> Void
}

/**
 Clients are instances that can send network requests. The requests are built using `Endpoints`.
 The responses of this endpoints will be inserted in the given managed object context.
 */
public protocol Client {
    
    // MARK: Required
    
    /// The base url which will be used to build the reqeusts
    var baseURL: String { get }
    
    /// The managed object context where all the responses will be inserted.
    var context: NSManagedObjectContext { get }
    
    // MARK: Optionals
    /**
     The DataResponseSerializer<Any> which will transform the original response to the JSON which will be used to insert the responses.
     By default it is `DataRequest.jsonResponseSerializer()`
     */
    var jsonSerializer: DataResponseSerializer<Any> { get }
    
    /**
     Use this method to perform any last minute changes on the DataRequest to send.
     Here you can add some validations, log the requests, or whatever thing you need.
     By default, it returns the request itself, without any addition
 
     - parameter request: The request that will be sent
     - parameter endpoint: The endpoint which launched the reqeust
 
     - returns: the modified request
     */
    func prepare(_ request: DataRequest, for endpoint: Endpoint) -> DataRequest
    
    /**
     Use this method to perform any last minute changes on the Promise created when a request is sent.
     Here you can add some common `recover` or `then` to all the promise
     By default, it returns the promise itself, without any addition
 
     - parameter request: The `Promise`
     - parameter endpoint: The `Endpoint` that launched the request
 
     - returns: the modified request
     */
    func process<T>(_ promise: Promise<T>, for endpoint: Endpoint) -> Promise<T>
}

public extension Client {
    
    // MARK: - Default methods
    public var jsonSerializer: DataResponseSerializer<Any> {
        return DataRequest.jsonResponseSerializer()
    }
    
    public func prepare(_ request: DataRequest, for endpoint: Endpoint) -> DataRequest {
        return request
    }
    
    func process<T>(_ promise: Promise<T>, for endpoint: Endpoint) -> Promise<T> {
        return promise
    }
}

public extension Client {
    
    /** 
     Enqueues the request generated by the endpoint and insert it using the generic type.
     It returns a Cancellable to inform if the request has finished succesfully or not. 
     
     The request can be cancelled at any time by calling `cancel()` in the cancellable object.
    
     - parameter endpoint: The endpoint

     - returns: The Cancellable object
     */
    public func cancellableEnqueue<T: Insertable>(_ endpoint: Endpoint) -> Cancellable<T> {
        let request = endpoint.request(withBaseURL: baseURL)
        let promise = Promise<T> { fulfill, reject in
            prepare(request, for: endpoint)
                .responseInsert(
                    queue: nil,
                    jsonSerializer: jsonSerializer,
                    context: context,
                    type: T.self) { response in
                        
                        switch response.result {
                        case let .success(value):
                            fulfill(value)
                        case let .failure(error):
                            reject(error)
                        }
            }
        }
        
        let finalPromise = process(promise, for: endpoint)
        let cancel = request.cancel
        return Cancellable(promise: finalPromise, cancel: cancel)
    }
    
    /**
     Enqueues the request generated by the endpoint and insert it using the generic type.
     It returns a Promise to inform if the request has finished succesfully or not
     
     - parameter endpoint: The endpoint
     
     - returns: The promise
     */
    public func enqueue<T: Insertable>(_ endpoint: Endpoint) -> Promise<T> {
        return cancellableEnqueue(endpoint).promise
    }
    
    /** 
     Enqueues the request generated by the endpoint.
     It returns a Cancellable to inform if the request has finished succesfully or not
     
     The request can be cancelled at any time by calling `cancel()` in the cancellable object.
     
     - parameter endpoint: The endpoint
     
     - returns: The cancellable object
     */
    public func cancellableEnqueue(_ endpoint: Endpoint) -> Cancellable<Void> {
        let request = endpoint.request(withBaseURL: baseURL)
        let promise = Promise<Void> { fulfill, reject in
            prepare(request, for: endpoint)
                .responseInsert(
                    jsonSerializer: jsonSerializer,
                    context: context,
                    type: Empty.self) { response in
                        
                        switch response.result {
                        case .success:
                            fulfill(())
                        case let .failure(error):
                            reject(error)
                        }
            }
        }
        
        let finalPromise = process(promise, for: endpoint)
        let cancel = request.cancel
        return Cancellable(promise: finalPromise, cancel: cancel)
    }
    
    /**
     Enqueues the request generated by the endpoint.
     It returns an empty promise to inform if the request has finished succesfully or not
     
     - parameter endpoint: The endpoint
     
     - returns: The promise
     */
    public func enqueue(_ endpoint: Endpoint) -> Promise<Void> {
        return cancellableEnqueue(endpoint).promise
    }
}

private struct Empty {}
extension Empty: Insertable {
    public static func insert(from json: Any, in context: NSManagedObjectContext) throws -> Empty {
        return Empty()
    }
}
